extends layout

block content

	div(class="systemid")
		h3 System ID
		p This is a required definition for most of the functionality below. It usually defines the folder name denoting a system type (eg nes, gen, gb, gba, a2600). Please be sure to fill this in otherwise the commands below will not work!
		input#system
	
	div(class="panel")
		h3 Decompress
		p 
			| Put all files (7z compressed) of a GoodMerged set into 
			span(class="folder") /00 - starthere/[system id]/
			| . This will command will decompress all those files into folders in 
			span(class="folder") /01 - decopressed/[system id]/

		button(onclick='$("#decompress").text("working");$.get("/decompress?system=" + $("#system").val(), function(response) { $("#decompress").text(response); })') GO!
		div#decompress(class="response")

	div(class="panel util")
		h3 Compress
		p(class="requied") REQUIED: Decompress
		p
			| Here we compress individual rom files from each title folder in 
			span(class="folder") /01 - decompressed/[systemid]/
			| . Can you filter out which rom files are compressed as well to reduce the set. The resulting files will be placed in 
			span(class="folder") /02 - compressed/[systemid]/
		p
			| Specify which compression method to use:
		div
			input(type="radio", name="compresstype", value="none")
			| None
		div
			input(type="radio", name="compresstype", value="zip", checked)
			| Zip 
		p
			| You can also specify which rom files you want to compress. Please read the descriptions of each of the following:
		div
			input(type="radio", name="compressfilter", value="0", checked)
			| None. All rom files will be compressed.
		div
			input(type="radio", name="compressfilter", value="1")
			| Verified Only. Any file with the verified flag in its filename [!], will be compressed, all others will be ignored
		div
			input(type="radio", name="compressfilter", value="2")
			| Unverified in subfolder. In this mode, the verified files (with [!] in their name) will be compressed in the base title folder while all others will be compressed into a subfolder.
		br
		button(onclick='$("#compress").text("working");$.get("/compress?system=" + $("#system").val() + "&compression=" + $("input[name=compresstype]:checked").val() + "&filter=" + $("input[name=compressfilter]:checked").val(), function(response) { $("#compress").text(response); })') GO!
		div#compress(class="response")

	div(class="panel util")
		h3 Alpha Sort
		p(class="requied") REQUIED: Decompress or Compress
		p
			| In this step, we can place title folders from either 
			span(class="folder") /01 - decompressed/[systemid]/
			|  or 
			span(class="folder") /02 - compressed/[systemid]/
			|  and place them into higher level folders which represent the letter(s) that title begins with. This helps with browsing for the right title. The resulting structure can be found in 
			span(class="folder") /04 - alphasort/[systemid]/
			| .
		p
			| Specify the location from which to sort title folders from:
		div
			input(type="radio", name="alphasource", value="compressed", checked)
			| Compressed
		div
			input(type="radio", name="alphasource", value="decompressed")
			| Decompressed
		p
			| You can also override the number of letters to merge files into at the top level (eg 2 is A-B, C-D while 3 is A-C, D-F)
		div
			input#alphastep(value="1")
		br
		button(onclick='$("#alphasort").text("working");$.get("/alphasort?system=" + $("#system").val() + "&source=" + $("input[name=alphasource]:checked").val() + "&step=" + $("alphastep").val(), function(response) { $("#alphasort").text(response); })') GO!
		div#alphasort(class="response")
	
	div(class="panel")
		h3 Rom Folders
		p 
			| First, let's ensure our two working folders (
			span(class="folder") /07 - romfiles/
			|  and 
			span(class="folder") /08 - romfiles/
			| ) are empty.
		button(onclick='$("#clearromfolders").text("working");$.get("/clearromfolders", function(response) { $("#clearromfolders").text(response); })') Clean Up 
		div#clearromfolders(class="response")

		p 
			| Now, copy all files in 
			span(class="folder") /01 - decompressed/[systemid]/Public Domain/
			|  into 
			span(class="folder") /07 - romfiles/
			| . This command will put each file into their own folder at 
			span(class="folder") /08 - romfolders/
			| .
		button(onclick='$("#romfolders").text("working");$.get("/romfolders", function(response) { $("#romfolders").text(response); })') GO!
		div#romfolders(class="response")
		p
			| Finally, copy all folders from 
			span(class="folder") /08 - romfolders/ 
			| and paste back into 
			span(class="folder") /01 - decompressed/[systemid]/
		p
			| Now delete the original 
			span(class="folder") /01 - decompressed/[systemid]/Public Domain/
			|  folder.
	
	div(class="panel")
		h3 Create Masterfile
		p(class="requied") REQUIED: The decompressed command is completed, ideally the rom folders command as well.
		p 
			| This command will parse each folder in 
			span(class="folder") /01 - decompressed/[systemid]/
			|  and assign a score to each rom file based on its file name. The goal is to find the rom file which is most suitable for playing (the top choice as I call it). For instance, a file name with (U) and [!] will score very high since these denote a US game which has been verified. See the 
			span(class="file") findbestrom.js
			|  file for how scoring is determined. The resulting file is called 
			span(class="file") [system id]_master
			|  and can be found in 
			span(class="folder") /06 - datafile/
			|  . It is a json formatted (not human consumable) file which contains the score for each file in a rom folder as well as denoting the top scoring file.
		button(onclick='$("#masterfile").text("working");$.get("/masterfile?system=" + $("#system").val(), function(response) { $("#masterfile").text(response); })') GO!
		div#masterfile(class="response")
		
	div(class="panel boxart")
		h3 Get Box Art
		p(class="requied") REQUIED: a generated masterfile for this System ID which we can use to understand scoring of domestic and forgien titles.
		p
			| Iterate over a rom collection and scrape google image search with the intent to hopefully get the correct box art automatically.
		p
			| First, define the search term. Use the phrase "[title]" as a placeholder for where the game's title will be used. Game titles come from the folder names in 
			span(class="folder") /01 - decompressed/[systemid]/
			| ). A common helper might also include the system's name and the term "box" resulting in something like: "[title] genesis box"
		div Search term:  
			input#term
			|  (eg [title] nintendo box)
		p
			| Second, define a delay between searches in ms (sometimes google would terminate my auto searching if I had too many requests within a given timeframe)
		div Optional delay between search: 
			input#delay
			|  (in ms)
		p
			| Third, by default, we do NOT replace existing downloaded box art if is exists, check this if you are sure you want to replace
		div Override existing downloaded box art: 
			input(type="checkbox")#overridebox
		p 
			| Finally, we can filter which titles we want to obtain box art for using the masterfile. Titles I determine as domestic score above 400. While foreign titles (Europe and Asia) likely score between 250 and 400. See the 
			span(class="file") findbestrom.js
			|  file for how the scoring works. The resulting box art is downloaded outside of the workspace into 
			span(class="folder") /public/boxart/[systemid]/[title]/original.jpg
			|  where is remains for the next step, which is to optionally modify it.
		div
			button(onclick='$("#getboxart").text("working");$.get("/getboxart?delay=" + $("#delay").val() + "&system=" + $("#system").val() + "&term=" + $("#term").val() + "&lower=400&override=" + $("#overridebox").is(":checked"), function() { $("#getboxart").text("complete"); })') Get Domestic (400 and up only)
		div
			button(onclick='$("#getboxart").text("working");$.get("/getboxart?delay=" + $("#delay").val() + "&system=" + $("#system").val() + "&term=" + $("#term").val() + "&lower=250&upper=400&override=" + $("#overridebox").is(":checked"), function() { $("#getboxart").text("complete"); })') Get Foreign (250 to 400 only)
		p
			| Optionally, you can define the range of scores you want to use as a box art filter. If going this route, please be sure to define upper and lower values. The maximum score a title can have is 500 and the lowest is 0.
		div
			input#lowscore(value="0")
			input#highscore(value="500")
		div
			button(onclick='$("#getboxart").text("working");$.get("/getboxart?delay=" + $("#delay").val() + "&system=" + $("#system").val() + "&term=" + $("#term").val() + "&upper=" + $("#highscore").val() + "&lower=" + $("#lowscore").val() + "&override=" + $("#overridebox").is(":checked"), function(response) { $("#getboxart").text(response); })') GO!
			div#getboxart(class="response")

		p After starting, watch the console window to see box art coming in. If it doesn't look accurate, stop the app and restart to try again.
		
	div(class="panel boxart")
		h3 Modify Box Art
		p(class="requied") REQUIED: Create Box Art Masterfile. Create ahead of time to capture downloaded art and afterwards for uploaded art.
		p 
			| This will open a new tab with the box art modification tools. It will use the box art downloaded to
			span(class="folder") /public/boxart/[systemid]/
		button(onclick='window.open("/boxart/" + $("#system").val(), "_blank")') OPEN
	
	div(class="panel boxart")
		h3 Create Box Art Masterfile
		p(class="requied") REQUIED: You have some downloaded box art for this System ID and have optionally modified it as well.
		p 
			| Just like with roms, we want to create a manifest for crazyerics which defined which titles have boxart downloaded for them. The resulting file will be located in 
			span(class="folder") /06 - datafile/[systemid]_boxart/
		button(onclick='$("#boxartmasterfile").text("working");$.get("/masterfile/boxart?system=" + $("#system").val(), function(response) { $("#boxartmasterfile").text(response); })') GO!
		div#boxartmasterfile(class="response")





	div(class="panel gamesdb")
		h3 The GamesDB
		p(class="requied") REQUIED: Masterfile
		p
			| Using the master file, iterator over all titles any hit thegamesgb.com api seeking details about the title. Will compare result to all others for likeliness of correction. You'll need to ensure a direct mapping of System ID to thegamesdb identifier (eg nes is "Nintendo Entertain System"). Add an entry in the config file at 
			span(class="file") config/default.json
			| .
		p
			| In case the previous search failed at any point, indicate how you'd like to update:
		div
			input(type="radio", name="thegamesdbtype", value="all", checked)
			| All Titles
		div
			input(type="radio", name="thegamesdbtype", value="missing")
			| Only Missing Titles (Continue)
		br
		button(onclick='$("#thegamesdb").text("working");$.get("/thegamesdb?system=" + $("#system").val() + "&update=" + $("input[name=thegamesdbtype]:checked").val(), function(response) { $("#thegamesdb").text(response); })') GO!
		div#thegamesdb(class="response")


	div(class="panel cdn")
		h3 Prepare Support Files
		p
			| Support files are generally BIOS files needed by certain systems in order for the emulator to run. This step compresses all files in 
			span(class="folder") /16 - supportfiles/
			|  to a single file which can be found in 
			span(class="file") /cdnsupportready/
			|  upon completion. Ensure the files are named as they need to be read from the Retroarch file system.
		br
		button(onclick='$("#supportfiles").text("working");$.get("/supportfiles?system=" + $("#system").val(), function(response) { $("#supportfiles").text(response); })') GO!
		div#supportfiles(class="response")
		p
			| Upon completion, the response will show a file size for the file generated. Copy it and put it in the crazyerics config definition for this system.
		p
			| You will then need to copy the resulting file in 
			span(class="file") /cdnsupportready/
			|  to its proper location on the CDN. The folder it should be placed in is equal to the emulator extention name for that system (eg 1.6.7-stable).

	div(class="panel cdn")
		h3 CDN Prepare Roms
		p(class="requied") REQUIED: Decompress, Rom Folders and Masterfile steps. Files are only obtainable on the CDN when an associated masterfile is defined. It isn't required here really, but strongly recommended you generate one first.
		p
			| Iterate over all rom files in 
			span(class="folder") /01 - decompressed/[systemid]/
			|  and compress them into a custom format for use on crazyerics. The resuting files are json formatted. The resulting file names are also compressed to avoid users hitting the cdn with specific known values. As the compression routine converts byte arrays into strings, its possible for a file to be so large the resulting string can overflow and fail on decompression. To get around this, I define a "segment size" in 
			span(class="file") /routes/index.js
			|  for the "cdnready" route. The default value should be ok but you can change this if necessary. I won't expose a control here for it. This process also creates the file 
			span(class="folder") /06 - datafile/[systemid]_filedata
			|  which is a manifest of compressed file sizes which I once used for crazyerics to know the size of a file before download (for the progress bar) but I no longer use it since I got the response header to provide this data.
		
		button(onclick='$("#cdnready").text("working");$.get("/cdnready?system=" + $("#system").val() + "&source=decompressed", function(response) { $("#cdnready").text(response); })') GO!
		div#cdnready(class="response")
		p 
			| On completion, you'll need to copy the resulting folder at 
			span(class="folder") /cdnready/[systemid]/
			|  to your CDN in the appropriate location. For versioning, I like to use something descriptive, such as a the GoodRoms version (eg GoodNes-3.23b). This name then has to be supplied to the crazyerics config file at 
			span(class="file") /config/default.json
			|  so that the crazyerics app pulls content from that location for a given system.

	div(class="panel cdn")
		h3 CDN Prepare Box Art
		p(class="requied") REQUIED: Image Magick. I use this app to create the required thumbnails in this step. Install with: brew install imagemagick --with-webp. Also, Box Art Masterfile. Box art can only be obtained on the CDN by crazyerics through an associated box art masterfile.
		p
			| Iterate over all folders in 
			span(class="folder") /public/boxart/[systemid]/
			|  and generate thumbnails using the 
			span(class="file") original.jpg
			|  file as a source for each title in that location. The thumbnail sizes I generate are defined in 
			span(class="file") cdnboxready.js
			| . This includes textures I use for webgl.

		button(onclick='$("#cdnreadyboxes").text("working");$.get("/cdnboxready/" + $("#system").val(), function(response) { $("#cdnreadyboxes").text(response); })') GO!
		div#cdnreadyboxes(class="response")

		p 
			| On completion, you'll need to copy the resulting folder at 
			span(class="folder") /cdnboxready/[systemid]/
			|  to your CDN in the appropriate location. For versioning, I like to use the date I complied the box art since I'm updating on a regular basis. Something like 2017-12-02. This name then has to be supplied to the crazyerics config file at 
			span(class="file") /config/default.json
			|  so that the crazyerics app pulls box art from that location for a given system.
